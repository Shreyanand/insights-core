from falafel.core.plugins import mapper


@mapper("iptables")
def parse_iptables_save(context):
    """
    Parse the output of command "/sbin/iptables-save" and
    return all iptables info in a dict.

    Input Example:
    ----------------------------------------------------------------
    # Generated by iptables-save v1.4.7 on Tue Aug 16 10:18:43 2016
    *filter
    :INPUT ACCEPT [0:0]
    :FORWARD ACCEPT [0:0]
    :OUTPUT ACCEPT [769:196899]
    -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
    -A INPUT -s 192.168.0.0/24 -j ACCEPT
    -A INPUT -p icmp -j ACCEPT
    -A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT
    -A INPUT -j REJECT --reject-with icmp-host-prohibited
    -A REJECT-LOG -p tcp -j REJECT --reject-with tcp-reset
    COMMIT
    # Completed on Tue Aug 16 10:18:43 2016
    # Generated by iptables-save v1.4.7 on Tue Aug 16 10:18:43 2016
    *mangle
    :PREROUTING ACCEPT [451:22060]
    :INPUT ACCEPT [451:22060]
    :FORWARD ACCEPT [0:0]
    :OUTPUT ACCEPT [594:47151]
    :POSTROUTING ACCEPT [594:47151]
    COMMIT
    # Completed on Tue Aug 16 10:18:43 2016
    # Generated by iptables-save v1.4.7 on Tue Aug 16 10:18:43 2016
    *nat
    :PREROUTING ACCEPT [0:0]
    :POSTROUTING ACCEPT [3:450]
    :OUTPUT ACCEPT [3:450]
    COMMIT
    # Completed on Tue Aug 16 10:18:43 2016

    PS:
       - Each table of iptables starting with a "# Generated by ..."
       - Each table is marked like *<table-name>, for example *filter
       - Each chain specifications starting with a ":" sign
       - A chain specification looks like :<chain-name> <chain-policy>
            [<packet-counter>:<byte-counter>]
       - The chain-name may be for example "INPUT"
       - Each iptables rule starting with a "-" sign
    ----------------------------------------------------------------

    Parse results:

    {
        "filter":
            {
                "INPUT": {"policy": 'ACCEPT', "counter": '[0:0]'},
                "FORWARD": {"policy": 'ACCEPT', "counter": '[0:0]'},
                "OUTPUT": {"policy": 'ACCEPT', "counter": '[769:196899]'},
                "RULES":
                  [
                    "A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT",
                    "A INPUT -s 192.168.0.0/24 -j ACCEPT",
                    "A INPUT -p icmp -j ACCEPT",
                    "A INPUT -j REJECT --reject-with icmp-host-prohibited",
                    "A REJECT-LOG -p tcp -j REJECT --reject-with tcp-reset"
                  ],
            },

        "mangle":
            {
                "PREROUTING": {"policy": "ACCEPT", "counter": "[451:22060]"},
                "INPUT": {"policy": "ACCEPT", "counter": "[451:22060]"},
                "FORWARD": {"policy": "ACCEPT", "counter": "[0:0]"},
                "OUTPUT": {"policy": "ACCEPT", "counter": "[594:47151]"},
                "POSTROUTING": {"policy": "ACCEPT", "counter": "[594:47151]"},
                "RULES": []
            },

        "nat":
            {
                "PREROUTING": {"policy": "ACCEPT", "counter": "[0:0]"},
                "POSTROUTING": {"policy": "ACCEPT", "counter": [3:450]"},
                "OUTPUT": {"policy": "ACCEPT", "counter": "[3:450]"},
                "RULES": []
            }
    }

    """
    outer_dict = {}
    for line in context.content:
        if line.startswith("# Generated"):
            table_dict = {}
            rules = []
        elif line.startswith("*"):
            outer_dict[line[1:]] = table_dict
        elif line.startswith(":"):
            chain_dict = {}
            chain_dict["policy"] = line.split()[1]
            chain_dict["counter"] = line.split()[2]
            table_dict[line.split()[0].strip(':')] = chain_dict
        elif line.startswith("-"):
            rules.append(line[1:])
        table_dict['RULES'] = rules
    return outer_dict
